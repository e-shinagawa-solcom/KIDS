$(function() {
  // response ディープコピー用配列
  var data = [];

  // dom 初期化用空配列
  var dataEmpty = new Array(20).fill('');

  // テーブルA 複製dom格納用配列
  var domA = [];

  // テーブルB 複製dom格納用配列
  var domB = [];

  // データ一時保管 ＊送信前のデータ格納用配列
  var temp = [];

  // 選択行インデックス格納用配列
  var selectedRowIndexes = [];

  // サブクエリキャッシュ
  $tableA = $('#tableA');
  $tableB = $('#tableB');

  // テーブルA <tbody>, <tr>
  $tableA_tbody = $('tbody', $tableA);
  $tableA_row = $('tr', $tableA_tbody);

  // テーブルB <tbody>, <tr>
  $tableB_tbody = $('tbody', $tableB);
  $tableB_row = $('tr', $tableB_tbody);

  // 複製元の $tableA_row を削除
  $tableA_row.remove();

  // 複製元の $tableB_row を削除
  $tableB_row.remove();

  /**
   * ----------------------------------------------------------------------------------------------------
   * 関数群
   * ----------------------------------------------------------------------------------------------------
   */

   /**
   * @method createSkeletonTable テーブル生成
   * @param data {Array} 基となるデータ配列
   * @param clone {Object} 複製元セレクター
   * @param dom {Array} 複製dom格納用配列
   * @param target {Object} 出力先ターゲットセレクター
   */
  $.createSkeletonTable = function(data, clone, dom, target) {
    dom = [];
    target.empty();
    $.each(data, function(i) {
      var $clone = clone.clone();
      dom.push({ html: $clone });
      var $html = dom[i].html;
      target.append($html);
    });
  };

  /**
   * @method addDataTableA テーブルAにデータを追加
   */
  $.addDataTableA = function() {
    if (data[0] === '') return;
    $.each(data, function(i, v) {
      var $target_row = $('tbody tr', $tableA).eq(i);
      var slipcode = v.strslipcode;
      var customercode = v.strcustomercode;
      var customername = v.strcustomername;
      var deliverydate = v.dtmdeliverydate.replace(/-/g, '/');
      var price = Math.floor(v.curtotalprice - (v.curtotalprice * v.curtax)).toLocaleString();
      var taxclasscode = v.lngtaxclasscode;
      var taxclassname = v.strtaxclassname;
      var tax = Number(v.curtax);
      var taxamount = Math.round(v.curtotalprice * v.curtax).toLocaleString();
      var id = v.strslipcode;

      // html 出力
      $target_row.attr('data-id', id);
      $('.slipcode', $target_row).html(slipcode);
      $('.customer .customercode', $target_row).html('[' + customercode + ']');
      $('.customer .customername', $target_row).html(customername);
      $('.deliverydate', $target_row).html(deliverydate);
      $('.price', $target_row).html(price);
      $('.taxclass .taxclasscode', $target_row).html('[' + taxclasscode + ']');
      $('.taxclass .taxclassname', $target_row).html(taxclassname);
      $('.tax', $target_row).html(tax + '％');
      $('.taxamount', $target_row).html(taxamount);
    });
  };

  /**
   * @method addDataTableB テーブルBにデータを追加
   */
  $.addDataTableB = function() {
    $.each(temp, function(i, v) {
      var $target_row = $('tbody tr', $tableB).eq(i);
      var slipcode = v.strslipcode;
      var customercode = v.strcustomercode;
      var customername = v.strcustomername;
      var deliverydate = v.dtmdeliverydate.replace(/-/g, '/');
      var price = Math.floor(v.curtotalprice - (v.curtotalprice * v.curtax)).toLocaleString();
      var taxclasscode = v.lngtaxclasscode;
      var taxclassname = v.strtaxclassname;
      var tax = Number(v.curtax);
      var taxamount = Math.round(v.curtotalprice * v.curtax).toLocaleString();
      var id = v.strslipcode;

      // html 出力
      $target_row.attr('data-id', id);
      $('.slipcode', $target_row).html(slipcode);
      $('.customer .customercode', $target_row).html('[' + customercode + ']');
      $('.customer .customername', $target_row).html(customername);
      $('.deliverydate', $target_row).html(deliverydate);
      $('.price', $target_row).html(price);
      $('.taxclass .taxclasscode', $target_row).html('[' + taxclasscode + ']');
      $('.taxclass .taxclassname', $target_row).html(taxclassname);
      $('.tax', $target_row).html(tax + '％');
      $('.taxamount', $target_row).html(taxamount);
    });
  };

  /**
   * @method scanAllCheckbox スキャンチェックボックス
   */
  $.scanAllCheckbox = function() {
    var $all_rows = $('tbody tr', $tableA);
    var $all_checkbox = $all_rows.find('input[type="checkbox"]');

    // 有効 <tr> ＊選択可能行
    var count_checked = 0;
    var count_disabled = 0;

    // data がない場合、全選択／解除チェックボックスを寝かせて無効化
    if (!data.length) {
      $('#allChecked').prop({ 'checked': false, 'disabled': true });
    } else {
      $('#allChecked').prop('disabled', false);
    }

    // <tr> に data-id 属性が存在しない場合、該当チェックボックスを無効化
    $.each($all_rows, function() {
      if (!$(this).data('id')) {
        $all_checkbox.prop({ 'checked': false, 'disabled': true });
      }
    });

    $.each($all_checkbox, function(i) {
      // チェックボックスがひとつでも外れている場合、全選択／解除チェックボックスを寝かす
      if (!$(this).closest('tr').hasClass('selected')) {
        $('#allChecked').prop('checked', false);
      }

      // チェックボックスがすべてチェックされた場合、全選択／解除チェックボックスを立てる
      if ($(this).closest('tr').hasClass('selected')) {
        ++count_checked;
      }
      if ($all_rows.length === count_checked) {
        $('#allChecked').prop('checked', true);
      }

      // すべてのチェックボックスが無効化された場合、全選択／解除チェックボックスを寝かせて無効化
      if ($(this).prop('disabled')) {
        ++count_disabled;
      }
      if (data.length === count_disabled) {
        $('#allChecked').prop({ 'checked': false, 'disabled': true });
      }
    });
  };

  /**
   * @method initTableA テーブルA 初期化
   */
  $.initTableA = function() {
    // スキャンチェックボックス
    $.scanAllCheckbox();
    data = [];
    $.createSkeletonTable(dataEmpty, $tableA_row, domA, $tableA_tbody);
  };

  /**
   * @method setTableSorter テーブルソート機能設定
   */
  $.setTableSorter = function() {
    $('#tableA, #tableB').trigger('destroy');
    $('#tableA').tablesorter({
      headers: {
        0: { sorter: false },
        1: { sorter: false }
      }
    });
    $('#tableB').tablesorter({
      headers: {
        0: { sorter: false }
      }
    });
  };

  /**
   * ----------------------------------------------------------------------------------------------------
   * 初期表示
   * ----------------------------------------------------------------------------------------------------
   */

  // スキャンチェックボックス
  $.scanAllCheckbox();

  $.createTable = function(response) {
    data = (response === undefined || response && !response.length) ? dataEmpty : Array.from(new Set(response));

    // テーブルA生成
    $.createSkeletonTable(data, $tableA_row, domA, $tableA_tbody);
    $.addDataTableA();

    // テーブルソート機能設定
    $.setTableSorter();

    // スキャンチェックボックス
    $.scanAllCheckbox();
  };

  /**
   * ----------------------------------------------------------------------------------------------------
   * イベント設定
   * ----------------------------------------------------------------------------------------------------
   */

  // テーブルA 全選択／解除チェックボックス
  $(document).on('change', '#allChecked', function(e) {
    e.preventDefault();

    var $all_rows = $('tbody tr', $tableA);
    var $all_rows_checkbox = $('input[type="checkbox"]', $tableA);

    if (e.target.checked) {
      $all_rows.addClass('selected');
      $all_rows_checkbox.not(':disabled').prop('checked', true).closest('tr').children('td').addClass('current');
    } else {
      $all_rows.removeClass('selected');
      $all_rows_checkbox.prop('checked', false).closest('tr').children('td').removeClass('current');
    }
  });

  // テーブルA 追加ボタン
  $('#btnAdd').on('click', function(e) {
    e.preventDefault();

    var $all_rows = $('tbody tr', $tableA);
    var $all_checkbox = $all_rows.find('input[type="checkbox"]');
    var checked = [];

    $.each($all_rows, function() {
      var $isChecked = $(this).find('input[type="checkbox"]').prop('checked');
      checked.push($isChecked);
    });

    // チェックボックスがひとつも選択されていない場合、return
    if ($.inArray(true, checked) === -1) return;

    // チェックボックスの該当データをすべて temp に格納
    $.each($all_checkbox, function() {
      if ($(this).prop('checked')) {
        var $data_id = $(this).closest('tr').data('id');
        var data_index = data.findIndex(function(value) { return value.strslipcode == $data_id });
        if (data_index !== -1) {
          temp.push(data[data_index]);
          // 該当データを data から削除
          data.splice(data_index, 1);
        }
      }
    });

    // テーブルBにデータを追加
    $.createSkeletonTable(temp, $tableB_row, domB, $tableB_tbody);
    $.addDataTableB();

    // テーブルA 再生成
    $.createSkeletonTable(data, $tableA_row, domA, $tableA_tbody);
    $.addDataTableA();

    // テーブルソート機能設定
    $.setTableSorter();

    // スキャンチェックボックス
    $.scanAllCheckbox();
  });
  
  // テーブルB 削除ボタン
  $('#btnDelete').on('click', function(e) {
    e.preventDefault();

    var $selected_rows = $('tbody tr.selected', $tableB);

    if (!$selected_rows.length) return;

    $.each($selected_rows, function () {
      var $data_id = $(this).data('id');
      var temp_index = temp.findIndex(function(value) { return value.strslipcode == $data_id });

      // 該当データを temp から削除
      if (temp_index !== -1) {
        temp.splice(temp_index, 1);
      }
    });

    // テーブルB 再生成
    $.createSkeletonTable(temp, $tableB_row, domB, $tableB_tbody);
    $.addDataTableB();

    // テーブルソート機能設定
    $.setTableSorter();

    // スキャンチェックボックス
    $.scanAllCheckbox();
  });

  // テーブルB 全削除ボタン
  $('#btnAllDelete').on('click', function(e) {
    e.preventDefault();

    var $tableB_row = $('tbody tr', $tableB);
    var count = 0;

    $.each($tableB_row, function(i) {
      if ($(this).data('id')) {
        ++count;
      }
    });

    if (!$tableB_row.data('id') && count === 0) return;

    temp = [];
    domB = [];

    // テーブルA 再生成
    $.createSkeletonTable(data, $tableA_row, domA, $tableA_tbody);
    $.addDataTableA();

    // テーブルB 初期化
    $tableB_tbody.empty();

    // テーブルソート機能設定
    $.setTableSorter();

    // スキャンチェックボックス
    $.scanAllCheckbox();
  });

  // 検索条件入力ボタン
  $('#btnSearchCondition').on('click', function(e) {
    e.preventDefault();

    // selectedRowIndexes 初期化
    selectedRowIndexes = [];

    var $all_rows = $('tbody tr', $tableA);
    var $all_checkbox = $all_rows.find('input[type="checkbox"]');

    // チェックボックスのチェックをすべて解除
    $.each($all_checkbox, function() {
      if ($(this).prop('checked')) {
        $(this).prop('checked', false);
      }
    });

    // すべての current を削除
    $.each($all_rows, function() {
      $(this).children('td').removeClass('current');
    });

    // 全選択／解除チェックボックスのチェックを解除
    if ($('#allChecked').prop('checked')) {
      $('#allChecked').prop('checked', false);
    }

    // 請求書検索ウィンドウをポップアップ表示
    window.open('./search.html', 'winSearch', 'width=640,height=480');
  });

  /**
   * ----------------------------------------------------------------------------------------------------
   * 特殊キー + click イベント処理
   * ----------------------------------------------------------------------------------------------------
   */

  // ctrl + 左 click コンテクストメニュー非表示
  $(document).on('contextmenu', function(e) {
    if (e.which === 1) return false;
  });

  // ctrl, shift キーイベントを document に設定
  var isCtrlKey = false;
  var isShiftKey = false;

  $(document).on({
    'keydown': function(e) {
      if (e.ctrlKey) isCtrlKey = true;
      if (e.shiftKey) isShiftKey = true;
    },
    'keyup': function(e) {
      isCtrlKey = false;
      isShiftKey = false;
    }
  });

  // テーブルA イベント処理
  $(document).on('mousedown', '#tableA tbody tr', function(e) {
    e.preventDefault();

    var $tableA_rows = $('#tableA tbody tr');
    var $tableA_rows_length = $tableA_rows.length;

    // テーブルA <tr> ctrl + click -> テーブルBにデータを追加
    if (isCtrlKey && e.which === 1) {
      var $data_id = $(this).data('id');
      var data_index = data.findIndex(function(value) { return value.strslipcode == $data_id });
      if (data_index !== -1) {
        temp.push(data[data_index]);
        // 該当データを data から削除
        data.splice(data_index, 1);
      }

      // テーブルBにデータを追加
      $.createSkeletonTable(temp, $tableB_row, domB, $tableB_tbody);
      $.addDataTableB();

      // テーブルA 再生成
      $.createSkeletonTable(data, $tableA_row, domA, $tableA_tbody);
      $.addDataTableA();

      // テーブルソート機能設定
      $.setTableSorter();

    }

    // テーブルA <input type="checkbox">
    if (e.target.nodeName === 'INPUT') {
      if ($tableA_rows_length !== 1 && isShiftKey && e.which === 1) {
        var $row_index = $(this).index();

        // 選択された行インデックスを selectedRowIndexes に格納
        selectedRowIndexes.push($row_index);

        // 昇順ソート
        selectedRowIndexes.sort(function(a, b) { return a - b });

        var min = selectedRowIndexes[0] + 1;
        var max = selectedRowIndexes[1] - 1;
        var array_range = [];
        for (var i = min; i <= max; ++i) {
          array_range.push(i);
        }

        // 複数選択
        if (!e.target.checked) {
          $(this).addClass('selected').children('td').addClass('current');

          $.each(array_range, function(i, v) {
            $tableA_rows.eq(v).addClass('selected').children('td').addClass('current');
            $tableA_rows.eq(v).find('input[type="checkbox"]').prop('checked', true);
          });
        }
        // 複数選択解除
        else {
          $(this).removeClass('selected').children('td').removeClass('current');

          $.each(array_range, function(i, v) {
            $tableA_rows.eq(v).removeClass('selected').children('td').removeClass('current');
            $tableA_rows.eq(v).find('input[type="checkbox"]').prop('checked', false);
          });
        }

        // selectedRowIndexes 初期化
        if (selectedRowIndexes.length >= 2) selectedRowIndexes = [];
      } else {
        if (!e.target.checked) {
          $(this).addClass('selected').children('td').addClass('current');
        } else {
          $(this).removeClass('selected').children('td').removeClass('current');
        }
      }
    }

    // テーブルA <tr> shift + click -> 複数選択／解除
    else if ($tableA_rows_length !== 1 && isShiftKey && e.which === 1) {
      var $row_index = $(this).index();

      // 選択された行インデックスを selectedRowIndexes に格納
      selectedRowIndexes.push($row_index);

      // 昇順ソート
      selectedRowIndexes.sort(function(a, b) { return a - b });

      // 複数選択
      if (!$(this).hasClass('selected')) {
        $(this).addClass('selected').children('td').addClass('current');
        $(this).find('input[type="checkbox"]').prop('checked', true);

        var i = selectedRowIndexes[0];
        while (i <= selectedRowIndexes[1]) {
          $tableA_rows.eq(i).addClass('selected').children('td').addClass('current');
          $tableA_rows.eq(i).find('input[type="checkbox"]').prop('checked', true);
          ++i;
        }
      }
      // 複数選択解除
      else {
        $(this).removeClass('selected').children('td').removeClass('current');
        $(this).find('input[type="checkbox"]').prop('checked', false);

        var i = selectedRowIndexes[0];
        while (i <= selectedRowIndexes[1]) {
          $tableA_rows.eq(i).removeClass('selected').children('td').removeClass('current');
          $tableA_rows.eq(i).find('input[type="checkbox"]').prop('checked', false);
          ++i;
        }
      }

      // selectedRowIndexes 初期化
      if (selectedRowIndexes.length >= 2) selectedRowIndexes = [];
    }

    // selectedRowIndexes 初期化
    if ($tableA_rows_length === 1) selectedRowIndexes = [];

    // スキャンチェックボックス
    $.scanAllCheckbox();
  });

  // テーブルB <tr> 特殊キー + click イベント処理
  $(document).on('mousedown', '#tableB tbody tr', function(e) {
    e.preventDefault();

    var $tableB_rows = $('#tableB tbody tr');
    var $tableB_rows_length = $tableB_rows.length;

    // テーブルB <tr> shift + click -> 複数選択／解除
    if ($tableB_rows_length !== 1 && isShiftKey && e.which === 1) {
      var $row_index = $(this).index();

      // 選択された行インデックスを selectedRowIndexes に格納
      selectedRowIndexes.push($row_index);

      // 昇順ソート
      selectedRowIndexes.sort(function(a, b) { return a - b });

      // 複数選択
      if (!$(this).hasClass('selected')) {
        $(this).addClass('selected').children('td').addClass('current');

        var i = selectedRowIndexes[0];
        while (i <= selectedRowIndexes[1]) {
          $tableB_rows.eq(i).addClass('selected').children('td').addClass('current');
          ++i;
        }
      }
      // 複数選択解除
      else {
        $(this).removeClass('selected').children('td').removeClass('current');

        var i = selectedRowIndexes[0];
        while (i <= selectedRowIndexes[1]) {
          $tableB_rows.eq(i).removeClass('selected').children('td').removeClass('current');
          ++i;
        }
      }

      // selectedRowIndexes 初期化
      if (i === selectedRowIndexes[1] + 1) selectedRowIndexes = [];
    }
    else {
      if ($(this).hasClass('selected')) {
        $(this).removeClass('selected').children('td').removeClass('current');
      } else {
        $(this).addClass('selected').children('td').addClass('current');
      }
    }
  });

});
